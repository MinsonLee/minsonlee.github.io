<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MinsonLee</title>
    <description>Welcome To My WebSite !</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 27 Apr 2018 00:32:49 +0800</pubDate>
    <lastBuildDate>Fri, 27 Apr 2018 00:32:49 +0800</lastBuildDate>
    <generator>Jekyll v3.8.0</generator>
    
      <item>
        <title>Thinking In EasyRentCars</title>
        <description>&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;最近在公司遇到了很多新的知识点、发现了很多新的思考点、对于一些问题学到了很多新的解决方案…感到脑子不够用,特开一个篇章用以记录在ERC工作过程中遇到的、悟到的东西！仅给自己作为整理知识用&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-are-you-thinking&quot;&gt;What are you thinking?&lt;/h2&gt;

&lt;h3 id=&quot;自动化部署&quot;&gt;自动化部署&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;思考:当前公司使用vagrant进行本地自动化开发环境搭建,这个过程中遇到很多不爽的地方,哪:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;为什么我们会选择vagrant进行搭建本地开发呢?&lt;/li&gt;
    &lt;li&gt;为什么没有选择Docker呢?vagrant与Docker的区别在什么地方呢?&lt;/li&gt;
    &lt;li&gt;什么场景下去使用它们两者呢?它们的原理又是啥呢?&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;vagrant同步更新文件延缓问题?[插件:&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant-winnfsd-1.4.0.gem&lt;/code&gt;==&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vagrant plugin install /gem-path&lt;/code&gt;]&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;&lt;a href=&quot;https://www.virtualbox.org/manual/&quot;&gt;如何使用VBoxManage加载box解决vagrant运行缓慢问题?&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Docker的深入了解&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;通过对vagrant的了解和学习发现”计算机网络”连一些基础知识都已经还给老师了?但是这很重要,抽时间整理、记录、深入学习?计算机四大原理:操作系统原理、编译原理、计算机组成原理、网络原理;线性代数;算法与数据结构&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;消息队列&quot;&gt;消息队列&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;思考:当前使用gearman做消息队列,做异步操作,并没有真正发挥消息队列的”作用”,虽然老大说gearman迟早要换,好奇:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;为啥当初要选型用gearman呢?&lt;/li&gt;
    &lt;li&gt;gearman的劣势是什么?&lt;/li&gt;
    &lt;li&gt;gearman的应用场景是啥?&lt;/li&gt;
    &lt;li&gt;gearman相比MQ是不是真的没有可取之处?&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;消息队列的运用:①削峰–&amp;gt;es:秒杀活动&amp;lt;==&amp;gt;地铁拉闸限流;②业务解耦–&amp;gt;MQ,互联网架构解耦神器[寄信人和邮差的场景==&amp;gt;消费者];③异步&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;服务&quot;&gt;服务&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;思考:现在公司用到的一些服务,以前也是粗浅掌握,现在也是用公司封装的,是时候真正掌握和学习了解它们了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;缓存服务&quot;&gt;缓存服务&lt;/h4&gt;
&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Mamecache &amp;amp;&amp;amp; Mamecached&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Radis&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;MongoDB&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;全文搜索服务&quot;&gt;全文搜索服务&lt;/h4&gt;
&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;sphinx&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Elasticsearch搜索服务==&amp;gt;Elasticsearch是否可以代替Mongo成为搜索存储服务器?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;数据库服务&quot;&gt;数据库服务&lt;/h4&gt;
&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;MySQL都出8啦…还不学习了解干嘛?&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;上一次帝明分享了MySQL的优化、慢查询的优化、索引的优化,整理深入学一下吧&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;公司大神们都推荐了《MySQL高性能》这本书,是不是该提上日程来看啦～&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;做了这么多次统计,自己踩了这多坑,看别人踩了这么多坑,该总结了吧?[select主键方式来代替count方案;使用一张临时表来存储定时执行记录:多批少量跑大表数据]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;编程思维&quot;&gt;编程思维&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;最近写代码脑子有点抽,抽空整理学习一下以下的知识吧&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;面向过程编程[你没看错,现在项目里还有一些古来代码还是这样写的,改也难改…但至少优雅点吧]&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;面向对象编程[兄台看框架源码去吧]&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;面向切面编程[兄台看框架源码去吧]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;php&quot;&gt;PHP&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;工作中发现掌握火候还不够的问题和知识点&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;opcache深入学习[以前只是知道有这个东西,但是没怎么深入了解过]&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;PHP生成器:&lt;a href=&quot;https://www.virtualbox.org/manual/&quot;&gt;①PHP生成器详解&lt;/a&gt; &lt;a href=&quot;https://www.virtualbox.org/manual/&quot;&gt;② 在PHP中使用协程实现多任务调度 
&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Composer的深入了解学习与运用&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;工具&quot;&gt;工具&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;工具一直都有在用,但是随着工作和平时慢慢积累的一些好用的配置和设置该记录一下啦&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;PHPStrom主题设置;格式化代码设置;插架安装-Git&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;SublimeText3:主题设置;插件安装-GoAnyWhere&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;VIM:使用vim一开始真的只是装逼,装逼失败之后…发现原来这个东西真的是我用的所有编辑器里最不卡/最牛逼的&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;Git:被运维哥哥(海明)怼过之后,潜心学习Git的使用,发现Git真的很棒,也学习到很多以前所不懂的,并与同事做了分享![感谢那些让你进步的人～]&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;问题&quot;&gt;问题&lt;/h3&gt;
&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;最近公司服务器一直CPU报警,消耗太高,如何排查CPU过高?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;转载请声明出处:&lt;a href=&quot;https://minsonlee.github.io&quot;&gt;MinsonLee的博客:https://minsonlee.github.io&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/04/think-in-erc/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/think-in-erc/</guid>
        
        <category>Thinking</category>
        
        <category>EasyRentCars</category>
        
        
      </item>
    
      <item>
        <title>02.Git与SVN的比较</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;1.无意争执SVN和Git孰优孰劣,如有冒犯请忽略该文!
2.文中设计个别操作命令,不懂可以直接跳过,明白意思即可,等学会操作Git之后,你真的想在此了解Git与SVN的时候你会再回来的看的!
3.本文选择性的记录了参考文献中的部分重点,想深入了解者可&lt;a href=&quot;http://blog.sina.com.cn/s/blog_765348af0102uyo9.html&quot;&gt;阅读原文&lt;/a&gt;并自行实践!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;svn的优缺点&quot;&gt;SVN的优缺点&lt;/h2&gt;
&lt;h3 id=&quot;优点&quot;&gt;优点&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;相比老版本控制系统(本地版本控制系统)而言,SVN最大的优点是解决了协同合作问题,让每个人在一定的程度上知道其他人的工作&lt;/li&gt;
  &lt;li&gt;提交的Commit号是连续的,整个仓库中是唯一的
    &lt;blockquote&gt;
      &lt;p&gt;Commit号是连续的:可以非常直观的就能看出提交记录的先后顺序
Commit号是在仓库中唯一:相比CVS(每个文件都有各自独立的版本号)这是一个伟大的进入,意味着SVN可以实现事务提交&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;拉取/更新代码,只能连接到唯一的版本库,取得最新数据[不用怀疑该仓库代码是不是最新]&lt;/li&gt;
  &lt;li&gt;权限管理方便,能做到”精细”分配&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;缺点&quot;&gt;缺点&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;由于集中式版本控制系统只有一个中心服务器,最容易遇到的就是:中心服务器单点故障.
    &lt;blockquote&gt;
      &lt;p&gt;如果中央服务器磁盘发生故障，且没做过备份或者备份得不及时的话，还会有丢失数据的风险,最坏的情况是彻底丢失整个项目的所有历史记录,并且还不能保证所有的数据都已经有人提取出来(虽然分布式版本控制系统也不能保证所有数据都已经有人提取出来,但只要有一个人提取过最新数据,那么所有的提交与历史记录都可以简单快捷的进行恢复)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;提交、比较版本差异等都必须有网络连接[本地版本库只记录最近一次提交的状态];&lt;/li&gt;
  &lt;li&gt;权限不支持分支继承;&lt;/li&gt;
  &lt;li&gt;SVN原理上只关心文件内容的具体差异–进行还原的时候需要反复计算差异得到结果[切换版本状态时慢,迁移版本库时工作量大]&lt;/li&gt;
  &lt;li&gt;SVN的工作区和版本库物理上分开，只能通过http、https、svn等协议访问”某一历史状态下的快照”&lt;/li&gt;
  &lt;li&gt;服务器压力大，数据库容量暴增[因为SVN是采用复制克隆方式实现分支操作的]&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;git的优缺点&quot;&gt;Git的优缺点&lt;/h2&gt;
&lt;h3 id=&quot;优点-1&quot;&gt;优点&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;只要你愿意，你的”仓库”就是所有人的仓库–只要你开源&lt;/li&gt;
  &lt;li&gt;从技术上讲:Git可能永远做不到类似SVN的路径授权(精细授权)–公司对代码库进行合理拆分,按库授权&lt;/li&gt;
  &lt;li&gt;每一次提交都是对代码仓库的完整备份–快照模式==&amp;gt;Git在切换操作上能如此的”速度”
    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;正因为是快照方式存储,Git在切换操作上能如此的”速度”,检出、比较任意版本等操作都可以看做是仅对两个指针的操作罢了&lt;/li&gt;
        &lt;li&gt;正是因为每一次提价都是对仓库的完整备份,因此发生托管服务器故障的时候,只需要将其中一个最新的人的本地仓库复制作为裸仓库在修复了的服务器重现部署一次即可恢复所有的提交记录及数据&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;工作区与本地仓库如影随行,不受”外界”干扰–你做你的,我做我的,必要的时候再提交到远程仓库合并更新
    &lt;blockquote&gt;
      &lt;p&gt;即使”断网”,”服务器故障期间”…你仍然可以继续在你本地提交、比较代码差异,等需要的时候再推送到服务器上让别人拉取合并你的代码即可!&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Git使用SHA-1散列哈希值作为全球唯一版本号!这样的好处是什么呢?
    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;对于一个”分布式版本控制系统”是必要的,保证了每个人每次提交后的版本号都不会重复&lt;/li&gt;
        &lt;li&gt;保证了数据的完整性:①Git的Commit哈希ID值是根据文件内容+目录结构计算出来的,能简洁的标明每个版本每个对象[文件、Commit对象]的变化;②该实现被设计在Git的底层,因此几乎是不可能绕过Git进行其他操作的&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Git的工作模式非常的灵活,远不是SVN可比的[当然工作模式没有好坏,只有”最适合”]
    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;Git可以在完全脱离Git服务器所在网络环境的情况下进行工作&lt;/li&gt;
        &lt;li&gt;Git提供变基操作,可以让你的修改提价历史,只保留有用的提交&lt;/li&gt;
        &lt;li&gt;Git可以肆无忌惮的使用分支进行功能/模块…的方式进行工作&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;缺点-1&quot;&gt;缺点&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;代码的保密性差,开发者可以克隆得到所有的代码和版本信息&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;svn和git的区别&quot;&gt;SVN和Git的区别&lt;/h2&gt;
&lt;h3 id=&quot;1-版本库目录的区别&quot;&gt;1. 版本库目录的区别:&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;SVN的工作区中”每一个目录”都包含一个名为&lt;code class=&quot;highlighter-rouge&quot;&gt;.svn&lt;/code&gt;的控制隐藏目录,Git只在工作区的根目录下有”唯一”的&lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt;的子目录&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;svn的作用&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.svn&lt;/code&gt;的作用:&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;1). 标识”当前工作区”和”版本库最近一次检出时”的状态关系
2). 包含了一份”检出时”的原始拷贝,当比较文件改动差异&amp;amp;&amp;amp;本地改动回退时,可直接参考原始拷贝进行操作不需要联网
3). 在目录下按文件搜索时,&lt;code class=&quot;highlighter-rouge&quot;&gt;.svn&lt;/code&gt; 下的文件原始拷贝会导致多出一倍的搜索时间和搜索结果
4). &lt;code class=&quot;highlighter-rouge&quot;&gt;.svn&lt;/code&gt;很容易在集成时引入产品中,从而导致Web服务器安全隐患
5). 由于每个目录下都包含了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;.svn&lt;/code&gt;,因此SVN可以将整个库检出到工作区，也可以将某个目录检出到工作区(对于一个庞大、臃肿的版本库用户来说，部分检出是非常方便的)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;git的作用&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt;的作用:&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;1). &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt;目录就是”完整的版本库”本身,存放了所有的元数据与对象数据[一旦你删除,就是破坏了整个版本库],除了和其他人交换数据外
2). 因为存放了所有的元数据与对象数据,所以任何版本库相关的操作都在本地完成[本地操作,避免了冗长的网络延迟–速度快]
3). 版本库”可以”脱离工作区而存在,成为”赤裸”版本库–搭建git仓库(git init –bare),但是工作区”不可以”脱离版本库而存在
4). 由于&lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt;只在根目录下有一个文件,因此Git在检出项目的时候,只能全部检出,不能按照目录进行部分检出[虽然Git有子模块、控制检出深度等方式,但是实现的成本都比SVN要大]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;思考：因为&lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt;是整个仓库的核心,破坏了&lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt;就登录破坏了整个版本库,那么在使用Git管理资料时如何做到数据备份安全呢？
① 本地的数据镜像化:在A磁盘分区中创建”赤裸”版本库( –bare) ，然后在另B磁盘分区中克隆A中的版本库作为工作区,定时脚本把B工作区的提交定时的PUSH到A分区的版本库;从而备份数据
② 理解”&lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt;目录就是完整的版本库本身”与”分布式版本控制系统”的内涵:你可以让其他人clone项目并按时pull备份&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;2-commit版本号的区别&quot;&gt;2. Commit版本号的区别&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;SVN的版本号是从仓库的角度是全局唯一并且连续的,Git的版本号是40位十六进制字符串(SHA-1散列值)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;svn版本号&quot;&gt;SVN版本号&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;1). SVN的全局版本号较CVS的每个文件都独立维护一套版本号而言,是版本控制系统的一个非常大的进步，看似简单的进步实际标明：SVN开始提供支持”事务提交,原子操作”了
2)&lt;code class=&quot;highlighter-rouge&quot;&gt;.svn&lt;/code&gt;的版本号是”连续”的,这样我们可以非常清晰直观的看出提交操作是第几次提交的,但这样也意味着我们可以预判到下一个版本号,从而进行一些其他的违规操作&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;git版本号&quot;&gt;Git版本号&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;1). Git的版本号是全球唯一的(SHA-1碰撞+数据长度一致的情况下才会有问题),Git每一次提交,会对”文件内容和目录结构”计算出一个SHA-1散列哈希值作为版本号
2). 下一个版本号几乎是不可能预判的,因此别有用心的人几乎很难针对下一个提交者的提交做手脚
3). Git一般使用从左面开始的7位字串作为简化版本号,只要该简化的版本号不产生歧义(只要不会出现重复的，你也可以使用更短的版本号)即可&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;可能有人了解过关于哈希碰撞问题,有兴趣可以看一下Git的解决方法：&lt;a href=&quot;https://stackoverflow.com/questions/9392365/how-would-git-handle-a-sha-1-collision-on-a-blob/9392525#9392525&quot;&gt;How would Git handle a SHA-1 collision on a blob?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;3-分支的区别&quot;&gt;3. 分支的区别&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;SVN分支的是通过拷贝方式实现的,而Git实现分支的代价仅仅只是在&lt;code class=&quot;highlighter-rouge&quot;&gt;.git/refs/&lt;/code&gt;目录下创建了一个对应文件并写入41个字符&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;svn的分支实现&quot;&gt;SVN的分支实现&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;1). SVN的分支是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;svn cp&lt;/code&gt;命令实现的,即:带历史的拷贝
2). SVN的分支与分支之间没有完全”隔离”:&lt;code class=&quot;highlighter-rouge&quot;&gt;svn cp&lt;/code&gt;是一种廉价拷贝,即并不是拷贝所有数据，而是建立一个已存在目录树的入口&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;git的分支实现&quot;&gt;Git的分支实现&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;1). Git实现分支的命令:&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch dev&lt;/code&gt;,这就创建了一条分支
2). Git中的分支实际上仅仅是一个包含所指对象校验和的文件,例如master分支是在:&lt;code class=&quot;highlighter-rouge&quot;&gt;.git/refs/heads/master&lt;/code&gt;中记录了其最新一次提交的Commit值
3). 综上所述,Git创建和销毁一个分支都非常的廉价(①新建一个文件;②写入41个字节：40位版本号+1个换行符)
4). Git的分支是完全隔离的,所有的关联都是通过”指针”的方式来进行关联的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Git实现分支的成本非常的廉价,因此Git官方也极力的推荐我们使用分支进行开发协作,这也正符合了Git设计时所要满足的:可同时支持成千上万人协同工作&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;4-识别提交操作的来源&quot;&gt;4. 识别提交操作的来源&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;SVN不区分提交操作来源,而Git对于提交来源分析的非常清晰,所以:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;当你使用分支进行工作时,销毁分支时Git能快速清晰的知道你到底那些提交合并到了master,那些提交没有合并到master&lt;/li&gt;
    &lt;li&gt;当你查看提交日志树的时候能清晰的看出那些是合并提交,那些是非合并提交&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;svn无法识别提交来源&quot;&gt;SVN无法识别提交来源&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;1). 由于SVN不会记录任何”合并操作”,当你提交本地修改,版本库并不能判断改提交来源于&lt;code class=&quot;highlighter-rouge&quot;&gt;svn merge&lt;/code&gt;还是你手工修改之后&lt;code class=&quot;highlighter-rouge&quot;&gt;svn commit&lt;/code&gt;的,因此要区分你只能在提交信息上手动备注进行区分!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;git对于提交来源清晰分辨&quot;&gt;Git对于提交来源清晰分辨&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;Git则可以很清晰的分辨出你的提交来源是:&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt; 还是 &lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt; 亦或是&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;导致的merge提交
查看Git提交日志树上所有合并提交:&lt;code class=&quot;highlighter-rouge&quot;&gt;git log --merges&lt;/code&gt;
查看Git提交日志树上所有非合并提交:&lt;code class=&quot;highlighter-rouge&quot;&gt;git log --no-merges&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;5-提交历史重写&quot;&gt;5. 提交历史重写&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;SVN不能重写提交历史,Git可以重写提交历史,让你只提交你想提交的历史&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;svn不支持历史重写&quot;&gt;SVN不支持历史重写&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;1). 集中式版本控制系统都具有这个问题:一旦完成向服务器的数据提交,就没法从客户端追回，只能在后续提交中覆盖修正。因为大家都在同一个中心服务器上拉取/更新代码,如果不这样做其他人会经常发生冲突!
2). 因此,SVN的修改历史只能由管理员来进行完成,在服务端进行撤销和修改提交历史,而且这样的代价也是极大的
3). 但是也正是因为是集中式版本控制系统,SVN能修改任意节点的提交日志说明.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;git重写提交历史&quot;&gt;Git重写提交历史&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;1). Git是分布式的,代码库允许任意的修改和丢弃,可以使用:&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;git filter-branch&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;git reset&lt;/code&gt;等方式来实现修改和重构历史提交,且非常灵活
2). 相比SVN能修改任意节点的提交说明的灵活性来说,Git只能修改最后一个commit的信息，且修改后将产生一个新的提交(commit号会变)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;参考文献:&lt;/strong&gt;
《SVN与Git的比较》：&lt;a href=&quot;http://blog.sina.com.cn/s/blog_765348af0102uyo9.html&quot;&gt;http://blog.sina.com.cn/s/blog_765348af0102uyo9.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;转载请声明出处:&lt;a href=&quot;https://minsonlee.github.io&quot;&gt;MinsonLee的博客:https://minsonlee.github.io&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/04/02.Git%E4%B8%8ESVN%E7%9A%84%E6%AF%94%E8%BE%83/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/02.Git%E4%B8%8ESVN%E7%9A%84%E6%AF%94%E8%BE%83/</guid>
        
        <category>Git</category>
        
        
      </item>
    
      <item>
        <title>01.Git的安装</title>
        <description>&lt;h2 id=&quot;1-写在前面的话&quot;&gt;1. 写在前面的话&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;下载地址：&lt;/strong&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git官网&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;参考资料：&lt;/strong&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2&quot;&gt;Pro Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;这里只介绍最简单的安装方法,本系列的重点不在”安装”,如果你连Git的安装都不会,就先学最简单的并学会使用再去深究什么源码编译安装啥的吧！！！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;2-在linux下安装git&quot;&gt;2. 在Linux下安装Git&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;查看一下当前系统是否已经安装git:&lt;code class=&quot;highlighter-rouge&quot;&gt;git --version&lt;/code&gt;,如果没版本信息即系统没有附带默认安装&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;2-1-包管理工具直接安装&quot;&gt;2-1). 包管理工具直接安装&lt;/h3&gt;
&lt;p&gt;如果你是在CentOS/Fedora上安装,可以直接使用yum:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果是在基于Debian发行版上,尝试用apt-get:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;如果全都不想在安装过程中修改任何东西,请直接在以上安装命令后方加上 -y 参数&lt;/li&gt;
    &lt;li&gt;想了解更多Unix风格系统使用安装工具安装Git的,可以点击&lt;a href=&quot;http://git-scm.com/download/linux&quot;&gt;传送门&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;2-2-源码编译安装&quot;&gt;2-2). 源码编译安装&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;找到你自己想安装的版本:&lt;a href=&quot;https://mirrors.edge.kernel.org/pub/software/scm/git/&quot;&gt;https://mirrors.edge.kernel.org/pub/software/scm/git/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;下载源码
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; &amp;lt;path&amp;gt; url/xxx.tar.gz &lt;span class=&quot;c&quot;&gt;# 下载你需要安装版本的tar包到指定目录[建议统一规范存放你电脑中下载的tar包]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;解压
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-zxvf&lt;/span&gt; xxx.tar.gz &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &amp;lt;path&amp;gt; &lt;span class=&quot;c&quot;&gt;# 解压安装包到指定目录[同样建议规范统一存放]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &amp;lt;path/git-xxx&amp;gt; &lt;span class=&quot;c&quot;&gt;# 进入解压后的目录&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;设置安装配置
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./configure &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/你想安装到什么位置去
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;安装
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;设置环境变量
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;export PATH=$PATH:/git安装目录bin所在绝对路径&quot;&amp;gt;&amp;gt;/etc/bashrc # 还有其他的方式可以设置,自定百度
$ source /etc/bashrc # 重新加载一次bashrc文件使得设置生效
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;验证是否安装成功
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 有版本信息则证明安装成功&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;3-在mac下安装git&quot;&gt;3. 在Mac下安装Git&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;下载Git:&lt;a href=&quot;http://git-scm.com/download/mac&quot;&gt;http://git-scm.com/download/mac&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;傻瓜式安装法&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;人穷没在Mac上安装过,如果客官用的是苹果自行百度一下吧,觉得本文有用顺便请打赏一下,哈哈哈～&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;4-在windows下安装git&quot;&gt;4. 在Windows下安装Git&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;点击&lt;a href=&quot;https://git-scm.com/download/win&quot;&gt;此处&lt;/a&gt;下载Git&lt;/li&gt;
  &lt;li&gt;“傻瓜式下一步安装法”安装即可！&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;5基础设置&quot;&gt;5.基础设置&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Git是为了进行”协同开发”而设计的版本控制系统,那在使用前你总要告诉Git最基本的信息吧:你是谁？出了问题如何才能联系到你?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;告诉Git:你是谁?&lt;/strong&gt;
    &lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ git config --global user.name &quot;yourname&quot;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;告诉Git:你的联系方式?&lt;/strong&gt;
    &lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ git config --global user.email &quot;youremail&quot;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;设置了以上最基本的信息之后,你已经可以正式开始使用Git了!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;转载请声明出处:&lt;a href=&quot;https://minsonlee.github.io&quot;&gt;MinsonLee的博客:https://minsonlee.github.io&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 24 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/04/01.Git%E7%9A%84%E5%AE%89%E8%A3%85/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/01.Git%E7%9A%84%E5%AE%89%E8%A3%85/</guid>
        
        <category>Git</category>
        
        
      </item>
    
      <item>
        <title>00.Git问世</title>
        <description>&lt;h2 id=&quot;写在前面的话&quot;&gt;写在前面的话&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;本系列的文章不完全适合对Git零基础的人看,你可能在看到某些章节的时候需要翻阅其他的一些”大众资料”[Git最基础的一些操作知识,只要百度就能搜到的知识]&lt;/li&gt;
    &lt;li&gt;本系列的文章会陆续更新一些我工作中遇到的Git的问题&lt;/li&gt;
    &lt;li&gt;为什么要写这一系列文章?本来很久之前就想写了,一直被诸多借口搁置了,入职租租车(为全球喜欢自驾游的驴友提供租车的平台)后,由于在GitLab上revert了一次代码,导致代码发布流程失败了,同时也被运维哥哥叼了[但是我觉得不应该有问题,我怀疑一定是发布脚本有bug],于是翻阅了大量的Git书籍和资料[当时只是想证明不是我的锅],在学习过程中发现了Git还有很多的有用的秘密操作,同时也开始养成写作习惯,遂有此系文章[不知道后续会不会停止这股热情,但是先开始吧,开始了再去想怎么坚持,不然是没有用的]!&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1什么是版本控制&quot;&gt;1.什么是”版本控制”？&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;确保不同人所编辑的同一东西能集体得到更新，并在必要时候可以对没一个修改状态进行：查看、恢复&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;2为什么会有版本控制系统&quot;&gt;2.为什么会有”版本控制系统”?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;“工具”的产生都是为了解决”生产”上的烦恼&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;你可以想象一下现在你要写“毕业论文”或者你老板叫你改一个“还没有拿定主意”的设计稿？你可能会频繁修改很多个版本，修改过程中你会频繁的：删除、修改、增加，你也不确定到底最终那个版本会是你需要的？你要怎么做？
    &lt;ul&gt;
      &lt;li&gt;每一个版本都复制一份完整的”资料”，或者把每个版本之间的差异都记录保存起来就可以了！&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;保存版本太多了，你怎么知道自己保存的东西到底是什么呢？
    &lt;ul&gt;
      &lt;li&gt;你可以再回过头去看每一个版本的”资料”,或者在命名的时候定义一个”完美”的规则,你能够通俗易懂的规则&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;如果是有很多个人和你一起完成手里的工作呢？如何防止命名的重复？如何防止相互修改的东西进行覆盖了?……
    &lt;ul&gt;
      &lt;li&gt;各自复制+重命名版本号：名字混乱(起名字真的很难起)、被覆盖了就”完蛋”了、不能协作&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;你所能想到的问题，肯定是有方法可以解决的！但是如果有一个工具可以帮你完成以上的问题，何乐而不为呢？i&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;3版本系统的几个重要代表和节点&quot;&gt;3.版本系统的几个重要”代表”和”节点”&lt;/h2&gt;
&lt;h3 id=&quot;1-本地版本系统rcs&quot;&gt;1. 本地版本系统:RCS&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;解决了当时的需求，但是随着需求的复杂，缺点也突显出来了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;类似”系统补丁”，在硬盘上保存”差集”，回退时进行大量计算比较得出不同&lt;/li&gt;
  &lt;li&gt;不能协作，个人电脑容易”犯傻”，遇到了问题：如何让不同人在不同系统上的开发者协同工作？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2集中式版本管理cvssvncvs的进阶产品&quot;&gt;2.集中式版本管理:CVS、SVN(CVS的进阶产品)&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;解决了本地版本系统遗留的问题,但是随着时间推移,现在缺点也逐渐突显出来了,尽管还有比较多企业在用着SVN&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;有一个单一的集中管理的服务器，保存所有文件的修订版本与版本之间的差异&lt;/li&gt;
  &lt;li&gt;协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新&lt;/li&gt;
  &lt;li&gt;需要回退版本或者跟新时候,工具通过算法回溯的去计算,恢复到指定版本状态的”资料”&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;但是如果”中心服务器”宕机了,那么意味着所有人都不能拉取、更新、比较历史版本差异…..,所有人都要停下等中心机器恢复工作！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;3分布式版本管理gitbazaar&quot;&gt;3.分布式版本管理:Git、Bazaar&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;尽管这一点不是所有分布式版本管理工具的特征,但这是绝大多书分布式管理工具共有的方式,&lt;/li&gt;
  &lt;li&gt;分布式客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;将整个仓库克隆下来，那么就不怕任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复&lt;/li&gt;
    &lt;li&gt;许多这类系统都可以指定和若干不同的远端代码仓库进行交互,当需要的时候才进行推送,不需要推送的时候你可以照常在本地进行代码:比较差异、分支切换、检出历史版本代码……&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;4为什么会有git&quot;&gt;4.为什么会有”Git”?&lt;/h2&gt;
&lt;p&gt;因为2005年，BitKeeper的商业公司与Linux内核开源社区的合作关系结束，Linux之父一气之下开发了自己的版本控制系统，虽然网上说了很多种，但是不管到底那个才是正确的，最后要求设计出来的版本控制系统满足以下要求：&lt;/p&gt;
&lt;blockquote&gt;

  &lt;ul&gt;
    &lt;li&gt;速度&lt;/li&gt;
    &lt;li&gt;安全&lt;/li&gt;
    &lt;li&gt;简单的设计&lt;/li&gt;
    &lt;li&gt;对非线性开发模式的强力支持(允许成千上万的分支并行开发)&lt;/li&gt;
    &lt;li&gt;完全分布式&lt;/li&gt;
    &lt;li&gt;有能力高效的管理类似Linux内核一样的超大规模项目(速度与数据量)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;转载请声明出处:&lt;a href=&quot;https://minsonlee.github.io&quot;&gt;MinsonLee的博客:https://minsonlee.github.io&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Apr 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/04/00.Git%E9%97%AE%E4%B8%96/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/00.Git%E9%97%AE%E4%B8%96/</guid>
        
        <category>Git</category>
        
        
      </item>
    
  </channel>
</rss>
